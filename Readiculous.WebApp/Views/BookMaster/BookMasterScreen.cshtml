@model IEnumerable<Readiculous.Services.ServiceModels.BookListItemViewModel>
@{
    ViewData["Title"] = "Book Management";
    var selectedGenres = ViewBag.Genres as List<Readiculous.Services.ServiceModels.GenreViewModel>;
}

<div class="container-fluid px-0">
    <div class="row mb-4 mx-0 align-items-center">
        <div class="col-md-6 px-0">
            <h1 class="mb-0">Book Management</h1>
        </div>
        <div class="col-md-6 px-0 text-md-end">
            <button type="button" class="btn btn-success btn-add-book">
                <i class="fas fa-plus me-2"></i>Add Book
            </button>
        </div>
    </div>

    <!-- Search and Filter Form -->
    <form asp-action="BookMasterScreen" method="get" class="mb-4" id="bookFilterForm">
        <div class="row g-3 align-items-end mx-0">
            <!-- Search Book Title -->
            <div class="col-md-3 px-0 pe-md-2">
                <label for="searchString" class="form-label">Search Book Title:</label>
                <input type="text" name="searchString" class="form-control" placeholder="Enter book title"
                       value="@ViewData["CurrentFilter"]" />
            </div>

            <!-- Search Type -->
            <div class="col-md-3 px-0 pe-md-2">
                <label for="searchType" class="form-label">Search Type:</label>
                <select name="searchType" class="form-select" asp-items="@ViewBag.BookSearchTypes"></select>
            </div>

            <!-- Filter by Genre -->
            <div class="col-md-3 px-0 pe-md-2">
                <label for="genreFilter" class="form-label">Filter by Genre:</label>
                <select name="genreFilter" class="form-select" asp-items="@ViewBag.GenreList">
                    <option value="">All Genres</option>
                </select>
            </div>

            <!-- Sort By -->
            <div class="col-md-3 px-0 pe-md-2">
                <label for="sortOrder" class="form-label">Sort By:</label>
                <select name="sortOrder" class="form-select" asp-items="@ViewBag.BookSortTypes"></select>
            </div>
        </div>

        <!-- Genre checkboxes -->
        @if (ViewBag.AllGenres is List<Readiculous.Services.ServiceModels.GenreViewModel> allGenres && allGenres.Any())
        {
            var selectedGenreIds = ViewBag.SelectedGenreIds as List<string> ?? new List<string>();

            <div class="mb-3 mt-3">
                <label class="form-label">Filter by Genre:</label>
                <div class="row">
                    @for (int i = 0; i < allGenres.Count; i++)
                    {
                        var genre = allGenres[i];
                        var isChecked = selectedGenreIds.Contains(genre.GenreId);

                        <div class="col-md-3">
                            <div class="form-check">
                                <input type="checkbox" name="selectedGenreIds" value="@genre.GenreId"
                                       class="form-check-input" @(isChecked ? "checked" : "") />
                                <label class="form-check-label">@genre.Name</label>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </form>

    <div class="row mx-0">
        <div class="col px-0">
            <div id="bookListContainer" class="table-responsive">
                @await Html.PartialAsync("_BookListPartial", Model)
            </div>
        </div>
    </div>

    <div class="row mx-0 mt-3">
        <div class="col-md-6 px-0 text-md-end">
            @if (ViewBag.PaginationModel != null)
            {
                @await Component.InvokeAsync("Pagination", ViewBag.PaginationModel)
            }
        </div>
        <div class="col-md-6 px-0">
            @await Component.InvokeAsync("PageSize", new { currentPageSize = ViewBag.PageSize ?? 10 })
        </div>
    </div>

</div>

<!-- Modal Containers -->
<div class="modal fade" id="addBookModal" tabindex="-1" aria-labelledby="addBookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="addBookModalLabel">Add Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="addBookModalBody">
                <!-- Content will be loaded here via AJAX -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="editBookModal" tabindex="-1" aria-labelledby="editBookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="editBookModalLabel">Edit Book</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="editBookModalBody">
                <!-- Content will be loaded here via AJAX -->
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="viewBookModal" tabindex="-1" aria-labelledby="viewBookModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="viewBookModalLabel">Book Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="viewBookModalBody">
                <!-- Content will be loaded here via AJAX -->
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/Shared/_DeleteModal.cshtml")

@section Scripts {
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

    <script>
        var bookMasterSettings = {
            bookMasterScreenUrl: '@Url.Action("BookMasterScreen", "BookMaster")',
            bookAddModalUrl: '@Url.Action("BookAddModal", "BookMaster")',
            bookEditModalUrl: '@Url.Action("BookEditModal", "BookMaster")',
            bookViewModalUrl: '@Url.Action("BookViewModal", "BookMaster")',
            deleteBookUrl: '@Url.Action("Delete", "BookMaster")'
        };
    </script>
    <script src="~/js/adminBookMaster/bookmasterScreen.js" asp-append-version="true"></script>
    <script>
        // Check for error message and display Toastr notification
        var errorMessage = '@TempData["ErrorMessage"]';
        if (errorMessage) {
            toastr.error(errorMessage);
        }
    </script>
}
