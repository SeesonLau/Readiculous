@model Readiculous.Services.ServiceModels.BookDetailsViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = Model.Title;

    bool isReviewer = ViewBag.IsReviewer ?? false;
    string userId = ViewBag.UserId as string ?? "";
    string userName = ViewBag.UserName as string ?? "";
    string userEmail = ViewBag.UserEmail as string ?? "";
    int totalReviews = ViewData["TotalReviews"] as int? ?? Model.Reviews?.Count ?? 0;
}

<div class="section-header d-flex justify-content-between align-items-center mb-4">
    <h2 class="section-title section-title-border mb-0">Book Details</h2>
</div>

<form id="anti-forgery-form">
    @Html.AntiForgeryToken()
</form>


<!-- ✅ Border container added here -->
<div class="container py-5">
    <div class="border rounded p-4 shadow-sm" style="background-color: #fff;">
        <div class="row g-3">
            <!-- LEFT COLUMN -->
            <div class="col-md-4 d-flex flex-column align-items-center">
                <div class="book-card text-center mb-3">
                    <img src="@(string.IsNullOrEmpty(Model.CoverImageUrl) ? "/img/placeholder.png" : Model.CoverImageUrl)"
                         class="book-image" alt="@Model.Title" />
                </div>

                @if (User.Identity.IsAuthenticated && isReviewer)
                {

                    @if (!ViewBag.IsFavorited)
                    {
                        <button class="btn btn-outline-primary mb-2 add-favorite-btn"
                                data-book-id="@Model.BookId"
                                data-title="@Model.Title"
                                data-cover="@Model.CoverImageUrl">
                            + Add to Favorites
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-outline-danger mb-2 remove-favorite-btn" data-book-id="@Model.BookId">
                            - Remove From Favorites
                        </button>
                    }

                    <div id="favoriteAlert" class="alert alert-success alert-dismissible fade show d-none text-center" role="alert" style="width: 90%;">
                        ✅ Favorite updated!
                        <button type="button" class="btn-close" onclick="hideFavoriteMessage()"></button>
                    </div>
                }
            </div>

            <!-- RIGHT COLUMN -->
            <div class="col-md-8">
                <h2>@Model.Title</h2>
                <p class="text-muted">by <strong>@Model.Author</strong></p>
                <p><strong>Genre:</strong> @(Model.Genres?.Any() == true ? string.Join(", ", Model.Genres) : "Unknown")</p>
                <p><strong>Series:</strong> @(Model.SeriesNumber > 0 ? $"Book {Model.SeriesNumber}" : "Standalone")</p>
                <p><strong>Publisher:</strong> @Model.Publisher</p>
                <p><strong>Published:</strong> @Model.PublicationYear</p>
                <p><strong>Added on:</strong> @Model.CreatedTime.ToString("MMMM dd, yyyy")</p>
                <p><strong>Average Rating:</strong> ⭐ @Model.AverageRating</p>

                <div class="card mt-4 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">Description</h5>
                        <p class="card-text">@Model.Description</p>
                    </div>
                </div>

                <div class="card review-card mt-4 shadow-sm">
                    <div class="card-body d-flex flex-column h-100">
                        <div class="d-flex justify-content-between align-items-center border-bottom pb-2 mb-2">
                            <h5 class="mb-0">Reviews (<span id="review-count">@totalReviews</span>)</h5>

                            @if (!ViewBag.IsReviewed)
                            {
                                <button class="btn btn-sm btn-primary open-add-review"
                                        data-book-id="@Model.BookId">
                                    + Add Review
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-sm btn-primary open-edit-review"
                                        data-book-id="@Model.BookId">
                                    ✎ Edit Review
                                </button>
                            }
                        </div>

                        <div class="overflow-auto" id="reviews-container">
                            @if (Model.Reviews != null && Model.Reviews.Any())
                            {
                                foreach (var review in Model.Reviews)
                                {
                                    <div class="card mb-3 shadow-sm">
                                        <div class="card-body">
                                            <h6 class="card-title">
                                                @review.Reviewer —
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <i class="bi @(i <= (int)review.Rating ? "bi-star-fill text-warning" : "bi-star text-muted")"></i>
                                                }
                                            </h6>
                                            <p class="card-text">@review.Comment</p>
                                            <p class="card-subtitle text-muted small">
                                                @review.CreatedTime.ToString("MMMM dd, yyyy")
                                            </p>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted mb-0 mt-3" id="no-reviews-text">No reviews yet.</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Reviewer “Add Review” Modal -->
@if (isReviewer)
{
    <!-- ADD Review Modal -->
    <div class="modal fade" id="addReviewModal" tabindex="-1" aria-labelledby="addReviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content" id="addReviewModalContent">
                @await Html.PartialAsync("~/Views/Shared/_AddReviewModal.cshtml",
                new Readiculous.Services.ServiceModels.ReviewViewModel
                {
                    BookId = Model.BookId,
                    UserId = userId,
                    UserName = userName,
                    Email = userEmail,
                    BookTitle = Model.Title
                })
            </div>
        </div>
    </div>

    <!-- EDIT Review Modal -->
    <div class="modal fade" id="editReviewModal" tabindex="-1" aria-labelledby="editReviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content" id="editReviewModalContent">
                @await Html.PartialAsync("~/Views/Shared/_EditReviewModal.cshtml",
                new Readiculous.Services.ServiceModels.ReviewViewModel
                {
                    BookId = Model.BookId,
                    UserId = userId,
                    UserName = userName,
                    Email = userEmail,
                    BookTitle = Model.Title
                })
            </div>
        </div>
    </div>

    <div class="modal fade" id="addReviewModal" tabindex="-1" aria-labelledby="addReviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                @await Html.PartialAsync("~/Views/Shared/_AddReviewModal.cshtml",
                new Readiculous.Services.ServiceModels.ReviewViewModel
                {
                    BookId = Model.BookId,
                    UserId = userId,
                    UserName = userName,
                    Email = userEmail,
                    BookTitle = Model.Title
                })
            </div>
        </div>
    </div>
    <div class="modal fade" id="editReviewModal" tabindex="-1" aria-labelledby="editReviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                @await Html.PartialAsync("~/Views/Shared/_EditReviewModal.cshtml",
                new Readiculous.Services.ServiceModels.ReviewViewModel
                {
                    BookId = Model.BookId,
                    UserId = userId,
                    UserName = userName,
                    Email = userEmail,
                    BookTitle = Model.Title
                })
            </div>
        </div>
    </div>
}

@section Styles {
    <link href="~/css/dashboard-books.css" rel="stylesheet" />
}
@section Scripts {
    <script src="~/js/bookDetail.js"></script>
    <script>
            document.addEventListener('DOMContentLoaded', function () {
            // Add to favorites
            document.body.addEventListener('click', function (e) {
                if (e.target && e.target.classList.contains('add-favorite-btn')) {
                    const button = e.target;
                    const bookId = button.dataset.bookId;
                    handleFavoriteChange('/Dashboard/AddToFavoritesBook', bookId);
                }

                if (e.target && e.target.classList.contains('remove-favorite-btn')) {
                    const button = e.target;
                    const bookId = button.dataset.bookId;
                    handleFavoriteChange('/Dashboard/RemoveFromFavoritesBook', bookId);
                }
            });
        });

        async function handleFavoriteChange(url, bookId) {
            const formData = new FormData();
            formData.append('bookId', bookId);

            // Get anti-forgery token from hidden form
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            if (token) {
                formData.append('__RequestVerificationToken', token);
            }

            try {
                const response = await fetch(url, {
                    method: 'POST',
                    body: formData
                });

                if (response.redirected) {
                    window.location.href = response.url;
                } else {
                    const result = await response.json();
                    if (result.success) {
                        showFavoriteMessage(); // your function
                        location.reload();
                    } else {
                        alert(result.message || 'Failed to update favorite status.');
                    }
                }
            } catch (error) {
                console.error("Error updating favorite:", error);
                alert("Something went wrong. Please try again.");
            }
        }
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // ⭐ Add Review Button Click
            document.body.addEventListener('click', async function (e) {
                if (e.target.matches('.open-add-review')) {
                    const bookId = e.target.dataset.bookId;
                    try {
                        const response = await fetch(`/Dashboard/CreateReviewModal?id=${bookId}`);
                        const html = await response.text();
                        const container = document.getElementById('addReviewModalContent');
                        if (container) {
                            container.innerHTML = html;
                            new bootstrap.Modal(document.getElementById('addReviewModal')).show();
                        }
                    } catch (err) {
                        console.error('Failed to load add review modal:', err);
                    }
                }
            });

            // ⭐ Edit Review Button Click
            document.body.addEventListener('click', async function (e) {
                if (e.target.matches('.open-edit-review')) {
                    const bookId = e.target.dataset.bookId;
                    try {
                        const response = await fetch(`/Dashboard/EditReviewModal?id=${bookId}`);
                        const html = await response.text();
                        const container = document.getElementById('editReviewModalContent');
                        if (container) {
                            container.innerHTML = html;
                            new bootstrap.Modal(document.getElementById('editReviewModal')).show();
                        }
                    } catch (err) {
                        console.error('Failed to load edit review modal:', err);
                    }
                }
            });

            // ⭐ Handle form submission for both add/edit
            document.body.addEventListener('submit', async function (e) {
                const form = e.target;
                const isAdd = form.id === 'addReviewForm';
                const isEdit = form.id === 'editReviewForm';

                if (isAdd || isEdit) {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
                    if (token) formData.append('__RequestVerificationToken', token);

                    const url = isAdd ? '/Dashboard/CreateReview' : '/Dashboard/EditReview';
                    const modalContentId = isAdd ? 'addReviewModalContent' : 'editReviewModalContent';

                    try {
                        const response = await fetch(url, {
                            method: 'POST',
                            body: formData
                        });

                        const container = document.getElementById(modalContentId);
                        if (response.ok) {
                            const result = await response.json();
                            if (result.success) {
                                location.reload();
                            } else {
                                const errorHtml = await response.text();
                                if (container) container.innerHTML = errorHtml;
                            }
                        } else {
                            const errorHtml = await response.text();
                            if (container) container.innerHTML = errorHtml;
                        }
                    } catch (err) {
                        console.error('Submit failed:', err);
                    }
                }
            });
        });
    </script>
}


