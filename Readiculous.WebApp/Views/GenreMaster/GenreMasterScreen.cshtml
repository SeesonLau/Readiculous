@model IEnumerable<Readiculous.Services.ServiceModels.GenreListItemViewModel>
@{
    ViewData["Title"] = "Genre Management";
}

@section Styles {
    <link rel="stylesheet" href="~/css/genre-master.css" />
}

<div class="genre-master-container">
    <div class="genre-header">
        <h1>Manage Genres</h1>
        <button type="button" id="openAddGenreModalBtn" class="add-genre-btn">
            <i class="fas fa-plus"></i> New Genre
        </button>
    </div>

    <div class="genre-search-container">
        <form asp-action="Index" method="get" class="genre-search-form">
            <div class="genre-search-group">
                <span class="genre-search-icon">
                    <i class="fas fa-search"></i>
                </span>
                <input type="text" name="searchString" class="genre-search-bar"
                       placeholder="Search by genre..." value="@ViewData["CurrentFilter"]" />
            </div>
            <div class="genre-filter-group">
                <label for="searchType" class="form-label">Sort By:</label>
                <select name="searchType" class="form-select">
                    @foreach (var type in (List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)ViewBag.GenreSearchTypes)
                    {
                        <option value="@type.Value" selected="@(type.Value == (ViewData["CurrentGenreSearchType"]?.ToString() ?? "") ? "selected" : "")">
                            @type.Text
                        </option>
                    }
                </select>
            </div>
            <button type="submit" class="genre-search-btn">Search</button>
        </form>
    </div>

    <div class="genre-table-container">
        <div id="genreListContainer">
            @await Html.PartialAsync("_GenreListPartial", Model)
        </div>
    </div>

    <div class="genre-pagination-container">
        <div>
            @if (ViewBag.PaginationModel != null)
            {
                @await Component.InvokeAsync("Pagination", ViewBag.PaginationModel)
            }
        </div>
        <div>
            @await Component.InvokeAsync("PageSize", new { currentPageSize = ViewBag.PageSize ?? 10 })
        </div>
    </div>
</div>

<!-- Add Genre Modal -->
<div class="modal fade genre-modal" id="addGenreModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Genre</h5>
                <button type="button" class="btn-close" data-coreui-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="addGenreModalBody">
                <!-- Content loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Edit Genre Modal -->
<div class="modal fade genre-modal" id="editGenreModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Genre</h5>
                <button type="button" class="btn-close" data-coreui-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="editGenreModalBody">
                <!-- Content loaded via AJAX -->
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Views/Shared/_DeleteModal.cshtml")

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/@@coreui/coreui@5.0.2/dist/js/coreui.bundle.min.js"></script>
    <script>
        const genreMasterSettings = {
            genreMasterScreenUrl: '/GenreMaster/GenreMasterScreen',
            genreAddModalUrl: '/GenreMaster/GenreAddModal',
            genreEditModalUrl: '/GenreMaster/GenreEditModal',
            genreViewModalUrl: '/GenreMaster/GenreViewPage',
            deleteGenreUrl: '/GenreMaster/Delete'
        };
    </script>
    <script src="~/js/adminGenreMaster/genremasterScreen.js"></script>
}
