@model IEnumerable<Readiculous.Services.ServiceModels.GenreListItemViewModel>
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Genre Management";
}

<h1>Genre Management</h1>

<p>
    <a asp-action="Create" class="btn btn-success">Create New</a>
</p>

<form asp-action="Index" method="get" class="mb-4">
    <div class="row align-items-end">
        <div class="col-md-6">
            <div class="form-group">
                <label for="searchString" class="form-label">Search Genre Name:</label>
                <input type="text" name="searchString" class="form-control" placeholder="Enter genre name"
                       value="@ViewData["CurrentFilter"]" />
            </div>
        </div>
        <div class="col-md-4">
            <div class="form-group">
                <label for="searchType" class="form-label">Sort By:</label>
                <select name="searchType" class="form-control">
                    @foreach (var type in (List<System.Web.Mvc.SelectListItem>)ViewBag.GenreSearchTypes)
                    {
                        <option value="@type.Value" selected="@(type.Value == (ViewData["CurrentGenreSearchType"]?.ToString() ?? "") ? "selected" : "")">
                            @type.Text
                        </option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button type="submit" class="btn btn-primary me-2">Search</button>
            <a asp-action="Index" class="btn btn-secondary">Clear</a>
        </div>
    </div>
</form>

<table class="table table-striped table-bordered">
    <thead class="table-dark">
        <tr>
            <th>@Html.DisplayNameFor(model => model.First().GenreId)</th>
            <th>@Html.DisplayNameFor(model => model.First().Name)</th>
            <th>@Html.DisplayNameFor(model => model.First().Description)</th>
            <th>@Html.DisplayNameFor(model => model.First().BookCount)</th>
            <th>@Html.DisplayNameFor(model => model.First().CreatedTime)</th>
            <th>@Html.DisplayNameFor(model => model.First().CreatedByUsername)</th>
            <th>@Html.DisplayNameFor(model => model.First().UpdatedTime)</th>
            <th>@Html.DisplayNameFor(model => model.First().UpdatedByUsername)</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@Html.DisplayFor(modelItem => item.GenreId)</td>
                <td>@Html.DisplayFor(modelItem => item.Name)</td>
                <td>@Html.DisplayFor(modelItem => item.Description)</td>
                <td>@Html.DisplayFor(modelItem => item.BookCount)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedTime)</td>
                <td>@Html.DisplayFor(modelItem => item.CreatedByUsername)</td>
                <td>@Html.DisplayFor(modelItem => item.UpdatedTime)</td>
                <td>@Html.DisplayFor(modelItem => item.UpdatedByUsername)</td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.GenreId" class="btn btn-sm btn-info">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.GenreId" class="btn btn-sm btn-secondary">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.GenreId" class="btn btn-sm btn-danger">Delete</a>
                </td>
            </tr>
        }

        @if (!Model.Any())
        {
            <tr>
                <td colspan="9" class="text-center text-muted">No genres found matching your criteria.</td>
            </tr>
        }
    </tbody>
</table>
