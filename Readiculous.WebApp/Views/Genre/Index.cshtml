@model IEnumerable<Readiculous.Services.ServiceModels.GenreListItemViewModel>
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Manage Genre";
}

<link rel="stylesheet" href="~/css/genre.css" />

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <span class="genre-header">Manage Genre</span>
        <button type="button" id="openAddGenreModalBtn" class="genre-btn-pink">+ New Genre</button>
    </div>
    <div class="genre-card sleek-filter mb-4">
        <form asp-action="Index" method="get">
            <div class="genre-form-row row g-3 align-items-end">
                <div class="col-md-6 col-lg-8 position-relative">
                    <span class="genre-search-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85zm-5.242 1.106a5 5 0 1 1 0-10 5 5 0 0 1 0 10z" />
                        </svg>
                    </span>
                    <input type="text" name="searchString" class="genre-search-bar form-control" placeholder="Search by genre..." value="@ViewData["CurrentFilter"]" />
                </div>
                <div class="col-md-3 col-lg-2">
                    <label for="searchType" class="form-label mb-1 fw-medium">Sort By:</label>
                    <select name="searchType" class="genre-sort-select form-select">
                        @foreach (var type in (List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)ViewBag.GenreSearchTypes)
                        {
                            <option value="@type.Value" selected="@(type.Value == (ViewData["CurrentGenreSearchType"]?.ToString() ?? "") ? "selected" : "")">
                                @type.Text
                            </option>
                        }
                    </select>
                </div>
                <div class="col-md-3 col-lg-2 d-flex align-items-end">
                    <button type="submit" class="genre-btn-pink btn w-100">Search</button>
                </div>
            </div>
        </form>
    </div>
    <div class="genre-table">
        <table class="table table-hover mb-0">
            <thead>
                <tr>
                    <th class="id-col">ID</th>
                    <th>GENRE</th>
                    <th>DESCRIPTION</th>
                    <th>BOOK COUNT</th>
                    <th class="text-center">ACTION</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr id="genre-row-@item.GenreId">
                        <td class="id-col align-middle">
                            <small class="text-muted">@(item.GenreId != null && item.GenreId.Length > 6 ? item.GenreId.Substring(0, 6) + "..." : item.GenreId)</small>
                        </td>
                        <td class="align-middle fw-medium">@item.Name</td>
                        <td class="align-middle">@item.Description</td>
                        <td class="align-middle text-center">
                            <span class="badge bg-secondary">@item.BookCount</span>
                        </td>
                        <td class="align-middle text-center">
                            <div class="genre-action-group btn-group" role="group">
                                <a asp-action="Details" asp-route-id="@item.GenreId" class="genre-action-btn btn btn-sm" title="View">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zm-8 4.5c-2.485 0-4.5-2.015-4.5-4.5S5.515 3.5 8 3.5s4.5 2.015 4.5 4.5-2.015 4.5-4.5 4.5zm0-7A2.5 2.5 0 1 0 8 11a2.5 2.5 0 0 0 0-5z" />
                                    </svg>
                                </a>
                                <button type="button" class="genre-action-btn btn btn-sm edit-genre-btn" 
                                        data-genre-id="@item.GenreId" 
                                        data-genre-name="@item.Name" 
                                        data-genre-description="@item.Description" 
                                        title="Edit">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M15.502 1.94a1.5 1.5 0 0 1 0 2.12l-1.439 1.439-2.12-2.12 1.439-1.44a1.5 1.5 0 0 1 2.12 0zm-2.56 3.182-2.12-2.12L2.5 11.122V13.5h2.378l8.064-8.378z" />
                                    </svg>
                                </button>
                                <button type="button" class="genre-action-btn btn btn-sm delete-genre-btn" 
                                        data-genre-id="@item.GenreId" 
                                        data-genre-name="@item.Name" 
                                        title="Delete">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                        <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5.5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6zm3 .5a.5.5 0 0 1 .5-.5.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6z" />
                                        <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1 0-2h3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3a1 1 0 0 1 1 1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V4h11V3a.5.5 0 0 0-.5-.5h-10a.5.5 0 0 0-.5.5z" />
                                    </svg>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
                @if (!Model.Any())
                {
                    <tr>
                        <td colspan="5" class="text-center text-muted py-4">
                            <i class="fas fa-search me-2"></i>No genres found matching your criteria.
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<!-- Custom Delete Modal Overlay -->
<div id="deleteGenreOverlay" class="genre-delete-overlay" style="display:none;">
    <div class="genre-delete-container">
        <div class="genre-delete-modal">
            <div class="genre-delete-image-container">
                <img src="~/img/delete-cat.png" alt="Cat" class="genre-delete-image" />
            </div>
            <div class="genre-delete-title">
                Are you sure you want to delete?
            </div>
            <div class="genre-delete-actions">
                <button type="button" class="genre-delete-cancel btn" id="cancelDeleteGenreBtn">Cancel</button>
                <form id="deleteGenreForm" method="post" style="display: inline;">
                    <input type="hidden" id="genreIdToDelete" name="GenreId" />
                    <button type="submit" class="genre-delete-submit btn">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Custom Add Genre Modal Overlay -->
<div id="addGenreOverlay" class="genre-delete-overlay" style="display:none;">
    <div class="genre-delete-container">
        <div class="genre-modal-card">
            <div class="genre-modal-header">Add Genre</div>
            <form id="addGenreForm" autocomplete="off">
                <div id="addGenreValidationSummary" class="text-danger mb-3"></div>
                <div class="mb-3">
                    <label for="addGenreName" class="genre-modal-label form-label">Name</label>
                    <input id="addGenreName" name="Name" class="genre-modal-input form-control" placeholder="Enter genre name" />
                    <span id="addGenreNameError" class="text-danger small"></span>
                </div>
                <div class="mb-3">
                    <label for="addGenreDescription" class="genre-modal-label form-label">Description</label>
                    <textarea id="addGenreDescription" name="Description" class="genre-modal-textarea form-control" rows="4" placeholder="Enter genre description"></textarea>
                    <span id="addGenreDescriptionError" class="text-danger small"></span>
                </div>
                <div class="genre-modal-actions d-flex justify-content-end gap-3">
                    <button type="button" class="genre-btn-cancel btn" id="cancelAddGenreBtn">Cancel</button>
                    <button type="submit" class="genre-btn-save btn">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Custom Edit Genre Modal Overlay -->
<div id="editGenreOverlay" class="genre-delete-overlay" style="display:none;">
    <div class="genre-delete-container">
        <div class="genre-modal-card">
            <div class="genre-modal-header">Edit Genre</div>
            <form id="editGenreForm" autocomplete="off">
                <div id="editGenreValidationSummary" class="text-danger mb-3"></div>
                <input type="hidden" id="editGenreId" name="GenreId" />
                <div class="mb-3">
                    <label for="editGenreName" class="genre-modal-label form-label">Name</label>
                    <input id="editGenreName" name="Name" class="genre-modal-input form-control" placeholder="Enter genre name" />
                    <span id="editGenreNameError" class="text-danger small"></span>
                </div>
                <div class="mb-3">
                    <label for="editGenreDescription" class="genre-modal-label form-label">Description</label>
                    <textarea id="editGenreDescription" name="Description" class="genre-modal-textarea form-control" rows="4" placeholder="Enter genre description"></textarea>
                    <span id="editGenreDescriptionError" class="text-danger small"></span>
                </div>
                <div class="genre-modal-actions d-flex justify-content-end gap-3">
                    <button type="button" class="genre-btn-cancel btn" id="cancelEditGenreBtn">Cancel</button>
                    <button type="submit" class="genre-btn-save btn">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Show custom modal
            $('.delete-genre-btn').on('click', function () {
                var genreId = $(this).data('genre-id');
                $('#genreIdToDelete').val(genreId);
                $('#deleteGenreOverlay').fadeIn(150);
            });

            // Hide custom modal
            $('#cancelDeleteGenreBtn').on('click', function () {
                $('#deleteGenreOverlay').fadeOut(150);
            });

            // Handle delete form submission
            $('#deleteGenreForm').on('submit', function (e) {
                e.preventDefault();
                var genreId = $('#genreIdToDelete').val();
                $.ajax({
                    url: '@Url.Action("Delete", "Genre")',
                    type: 'POST',
                    data: $(this).serialize(),
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function (result) {
                        if (result.success) {
                            $('#genre-row-' + genreId).fadeOut(300, function() {
                                $(this).remove();
                                if ($('tbody tr').length === 0) {
                                    $('tbody').append('<tr><td colspan="5" class="text-center text-muted py-4"><i class="fas fa-search me-2"></i>No genres found matching your criteria.</td></tr>');
                                }
                            });
                            $('#deleteGenreOverlay').fadeOut(150);
                        } else {
                            alert('Error deleting genre: ' + result.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('An error occurred while deleting the genre: ' + error);
                    }
                });
            });

            // Show Add Genre modal
            $('#openAddGenreModalBtn').on('click', function () {
                $('#addGenreOverlay').fadeIn(150);
            });
            // Hide Add Genre modal
            $('#cancelAddGenreBtn').on('click', function () {
                $('#addGenreOverlay').fadeOut(150);
            });
            // Handle Add Genre form submission
            $('#addGenreForm').on('submit', function (e) {
                e.preventDefault();
                var name = $('#addGenreName').val().trim();
                var description = $('#addGenreDescription').val().trim();
                var isValid = true;
                $('#addGenreValidationSummary').text('');
                $('#addGenreNameError').text('');
                $('#addGenreDescriptionError').text('');
                if (!name) {
                    $('#addGenreNameError').text('Genre Name is required.');
                    isValid = false;
                }
                if (!description) {
                    $('#addGenreDescriptionError').text('Genre Description is required.');
                    isValid = false;
                }
                if (!isValid) return;
                $.ajax({
                    url: '@Url.Action("Create", "Genre")',
                    type: 'POST',
                    data: { Name: name, Description: description },
                    headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    success: function (result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            $('#addGenreValidationSummary').text(result.message || 'Failed to add genre.');
                        }
                    },
                    error: function (xhr) {
                        var response = xhr.responseJSON;
                        if (response && response.errors) {
                            if (response.errors.Name) $('#addGenreNameError').text(response.errors.Name);
                            if (response.errors.Description) $('#addGenreDescriptionError').text(response.errors.Description);
                        } else {
                            $('#addGenreValidationSummary').text('An error occurred while adding the genre.');
                        }
                    }
                });
            });

            // Show Edit Genre modal
            $('.edit-genre-btn').on('click', function () {
                var genreId = $(this).data('genre-id');
                var genreName = $(this).data('genre-name');
                var genreDescription = $(this).data('genre-description');
                $('#editGenreId').val(genreId);
                $('#editGenreName').val(genreName);
                $('#editGenreDescription').val(genreDescription);
                $('#editGenreValidationSummary').text('');
                $('#editGenreNameError').text('');
                $('#editGenreDescriptionError').text('');
                $('#editGenreOverlay').fadeIn(150);
            });
            // Hide Edit Genre modal
            $('#cancelEditGenreBtn').on('click', function () {
                $('#editGenreOverlay').fadeOut(150);
            });
            // Handle Edit Genre form submission
            $('#editGenreForm').on('submit', function (e) {
                e.preventDefault();
                var genreId = $('#editGenreId').val();
                var name = $('#editGenreName').val().trim();
                var description = $('#editGenreDescription').val().trim();
                var isValid = true;
                $('#editGenreValidationSummary').text('');
                $('#editGenreNameError').text('');
                $('#editGenreDescriptionError').text('');
                if (!name) {
                    $('#editGenreNameError').text('Genre Name is required.');
                    isValid = false;
                }
                if (!description) {
                    $('#editGenreDescriptionError').text('Genre Description is required.');
                    isValid = false;
                }
                if (!isValid) return;
                $.ajax({
                    url: '@Url.Action("Edit", "Genre")',
                    type: 'POST',
                    data: { GenreId: genreId, Name: name, Description: description },
                    headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    success: function (result) {
                        if (result.success) {
                            location.reload();
                        } else {
                            $('#editGenreValidationSummary').text(result.message || 'Failed to update genre.');
                        }
                    },
                    error: function (xhr) {
                        var response = xhr.responseJSON;
                        if (response && response.errors) {
                            if (response.errors.Name) $('#editGenreNameError').text(response.errors.Name);
                            if (response.errors.Description) $('#editGenreDescriptionError').text(response.errors.Description);
                        } else {
                            $('#editGenreValidationSummary').text('An error occurred while updating the genre.');
                        }
                    }
                });
            });
        });
    </script>
}
