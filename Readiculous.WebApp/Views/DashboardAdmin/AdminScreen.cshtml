@model Readiculous.Services.ServiceModels.AdminDashboardViewModel;

@{
    ViewData["Title"] = "Dashboard";
}

<link rel="stylesheet" href="~/css/adminDashboard/admin-screen.css" />
<div class="container-fluid px-4 py-4">
    <!-- Summary Cards -->
    <div class="row">
        <div class="col-12 col-sm-4 mb-4">
            <div class="summary-card">
                <h5>Total Users</h5>
                <h2>@Model.UserCount</h2>
            </div>
        </div>
        <div class="col-12 col-sm-4 mb-4">
            <div class="summary-card">
                <h5>Total Books</h5>
                <h2>@Model.BookCount</h2>
            </div>
        </div>
        <div class="col-12 col-sm-4 mb-4">
            <div class="summary-card">
                <h5>Total Genres</h5>
                <h2>@Model.GenreCount</h2>
            </div>
        </div>
    </div>

    <!-- Content Section -->
    <div class="row">
        <!-- Most Used Genre -->
        <div class="col-12 col-lg-8 mb-4 mb-lg-0">
            <div class="chart-container h-100">
                <h5 class="section-title">Most Used Genres</h5>
                <div class="bar-chart">
                    @if (Model.MostUsedGenres != null && Model.MostUsedGenres.Any())
                    {
                        // Get the maximum count for percentage calculation
                        var maxCount = Model.MostUsedGenres.Max(g => g.Value);

                        foreach (var genre in Model.MostUsedGenres)
                        {
                            var percentage = maxCount > 0 ? (genre.Value * 100) / maxCount : 0;

                            <div class="bar-item">
                                <div class="bar-label">
                                    <span>@genre.Key.Name</span>
                                    <span>@genre.Value</span>
                                </div>
                                <div class="bar-bg">
                                    <div class="bar-fill" style="width: @percentage%"></div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-3">No genre data available</div>
                    }
                </div>
            </div>
        </div>

        <!-- Top 5 Reviewers -->
        <div class="col-12 col-lg-4">
            <div class="reviewer-container h-100">
                <h5 class="section-title text-center">Top 5 Reviewers by Review Count</h5>
                <!-- Reviewer cards -->
                @foreach (var reviewer in Model.TopReviewers.OrderByDescending(r => r.UserReviewModels.Count).Take(5))
                {
                    <div class="reviewer-card d-flex align-items-center">
                        <div class="rank-number">@(Model.TopReviewers.IndexOf(reviewer) + 1)</div>
                        <div class="user-avatar">
                            @if (!string.IsNullOrEmpty(reviewer.ProfileImageUrl))
                            {
                                <img src="@reviewer.ProfileImageUrl" alt="Profile Picture" class="rounded-circle" style="width: 40px; height: 40px; object-fit: cover;" />
                            }
                            else
                            {
                                <div class="rounded-circle bg-secondary d-flex justify-content-center align-items-center" style="width: 40px; height: 40px;">
                                    <span class="text-white">@reviewer.UserName.Substring(0, 1).ToUpper()</span>
                                </div>
                            }
                        </div>
                        <div class="flex-grow-1">
                            <div>@reviewer.UserName</div>
                            <div class="d-flex align-items-center gap-2 small">
                                <span><i class="bi bi-star-fill text-warning"></i> @reviewer.AverageRating.ToString("0.0") </span>
                                <span>|</span>
                                <span>@reviewer.UserReviewModels.Count Reviews</span>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@* 
<!-- Top 5 Reviewers -->
<div class="col-12 col-lg-4">
    <div class="reviewer-container h-100">
        <h5 class="section-title text-center">Top 5 Reviewers</h5>
        <!-- Reviewer cards -->
        @if (Model.TopReviewers != null && Model.TopReviewers.Any())
        {
            var rank = 1;
            foreach (var reviewer in Model.TopReviewers)
            {
                <div class="reviewer-card d-flex align-items-center">
                    <div class="rank-number">@rank</div>
                    <div class="user-avatar">@GetInitials(reviewer.DisplayName)</div>
                    <div class="flex-grow-1">
                        <div>@reviewer.DisplayName</div>
                        <div class="d-flex align-items-center gap-2 small">
                            <span><i class="bi bi-star-fill text-warning"></i> @reviewer.AverageRating.ToString("0.0")</span>
                            <span>|</span>
                            <span>@reviewer.TotalReviews Reviews</span>
                        </div>
                    </div>
                </div>
                rank++;
            }
        }
        else
        {
            <div class="text-center py-3">No reviewers found</div>
        }
    </div>
</div>

@functions {
    string GetInitials(string displayName)
    {
        if (string.IsNullOrEmpty(displayName))
            return "NA";

        var names = displayName.Split(' ');
        if (names.Length == 1)
            return names[0].Length >= 2 ? names[0].Substring(0, 2).ToUpper() : names[0].ToUpper();

        return $"{names[0][0]}{names[1][0]}".ToUpper();
    }
} *@