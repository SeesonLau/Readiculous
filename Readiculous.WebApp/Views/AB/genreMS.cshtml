@model IEnumerable<Readiculous.Services.ServiceModels.GenreListItemViewModel>
@using Microsoft.AspNetCore.Mvc.Rendering
@{
    ViewData["Title"] = "Manage Genre";
}

<link rel="stylesheet" href="~/css/genre.css" />

<div class="container mt-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <span class="genre-header">Manage Genre</span>
        <button type="button" id="openAddGenreModalBtn" class="genre-btn-pink">+ New Genre</button>
    </div>
    <div class="genre-card sleek-filter mb-4">
        <form asp-action="Index" method="get">
            <div class="genre-form-row row g-3 align-items-end">
                <div class="col-md-6 col-lg-8 position-relative">
                    <span class="genre-search-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" viewBox="0 0 16 16">
                            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85zm-5.242 1.106a5 5 0 1 1 0-10 5 5 0 0 1 0 10z" />
                        </svg>
                    </span>
                    <input type="text" name="searchString" class="genre-search-bar form-control" placeholder="Search by genre..." value="@ViewData["CurrentFilter"]" />
                </div>
                <div class="col-md-3 col-lg-2">
                    <label for="searchType" class="form-label mb-1 fw-medium">Sort By:</label>
                    <select name="searchType" class="genre-sort-select form-select">
                        @foreach (var type in (List<Microsoft.AspNetCore.Mvc.Rendering.SelectListItem>)ViewBag.GenreSearchTypes)
                        {
                            <option value="@type.Value" selected="@(type.Value == (ViewData["CurrentGenreSearchType"]?.ToString() ?? "") ? "selected" : "")">
                                @type.Text
                            </option>
                        }
                    </select>
                </div>
                <div class="col-md-3 col-lg-2 d-flex align-items-end">
                    <button type="submit" class="genre-btn-pink btn w-100">Search</button>
                </div>
            </div>
        </form>
    </div>

    <div class="row mx-0">
        <div class="col px-0">
            <div id="genreListContainer" class="table-responsive">
                @await Html.PartialAsync("_GenreListPartial", Model)
            </div>
        </div>
    </div>

    <div class="row mx-0 mt-3">
        <div class="col-md-6 px-0">
            @if (ViewBag.PaginationModel != null)
            {
                @await Component.InvokeAsync("Pagination", ViewBag.PaginationModel)
            }
        </div>
        <div class="col-md-6 px-0 text-md-end">
            @await Component.InvokeAsync("PageSize", new { currentPageSize = ViewBag.PageSize ?? 10 })
        </div>
    </div>
</div>


<!-- Add Genre Modal -->
<div class="modal fade" id="addGenreModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div id="addGenreModalBody">
            <!-- Content loaded via AJAX will be inserted here -->
        </div>
    </div>
</div>

<!-- Edit Genre Modal -->
<div class="modal fade" id="editGenreModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div id="editGenreModalBody">
            <!-- Content loaded via AJAX will be inserted here -->
        </div>
    </div>
</div>


@await Html.PartialAsync("~/Views/Shared/_DeleteModal.cshtml")

@section Scripts {

    <script>
        const genreMasterSettings = {
            genreMasterScreenUrl: '/GenreMaster/GenreMasterScreen',
            genreAddModalUrl: '/GenreMaster/GenreAddModal',
            genreEditModalUrl: '/GenreMaster/GenreEditModal',
            genreViewModalUrl: '/GenreMaster/GenreViewModal',
            deleteGenreUrl: '/GenreMaster/Delete'
        };
    </script>
    <script src="~/js/adminGenreMaster/genremasterScreen.js"></script>
}