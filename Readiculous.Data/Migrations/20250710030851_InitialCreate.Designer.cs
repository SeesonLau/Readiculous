// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Readiculous.Data;

#nullable disable

namespace Readiculous.Data.Migrations
{
    [DbContext(typeof(ReadiculousDbContext))]
    [Migration("20250710030851_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Readiculous.Data.Models.Book", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BookGenreGenreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("PublicationYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.HasIndex("BookGenreGenreId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex(new[] { "Author" }, "IX_Author")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_CreatedBy")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "CreatedTime" }, "IX_CreatedTime")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "Publisher" }, "IX_Publisher")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "Title" }, "IX_Title")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UpdatedBy")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "BookId" }, "UQ__BookID")
                        .IsUnique()
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "ISBN" }, "UQ__ISBN")
                        .IsUnique()
                        .HasFilter("[DeletedTime] IS NULL");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Readiculous.Data.Models.BookGenreAssignment", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GenreId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BookId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("BookGenreAssignments", (string)null);
                });

            modelBuilder.Entity("Readiculous.Data.Models.FavoriteBook", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("FavoriteBooks", (string)null);
                });

            modelBuilder.Entity("Readiculous.Data.Models.Genre", b =>
                {
                    b.Property<string>("GenreId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("GenreId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_CreatedBy")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "CreatedTime" }, "IX_CreatedTime")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UpdatedBy")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.ToTable("Genres", (string)null);
                });

            modelBuilder.Entity("Readiculous.Data.Models.Review", b =>
                {
                    b.Property<string>("BookId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Readiculous.Data.Models.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccessStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DeletedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("DeletedBy");

                    b.HasIndex(new[] { "AccessStatus" }, "IX_AccessStatus")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "CreatedBy" }, "IX_CreatedBy")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "CreatedTime" }, "IX_CreatedTime")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "Role" }, "IX_Role")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "UpdatedBy" }, "IX_UpdatedBy")
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "Email" }, "UQ__Email")
                        .IsUnique()
                        .HasFilter("[DeletedTime] IS NULL");

                    b.HasIndex(new[] { "Username" }, "UQ__Username")
                        .IsUnique()
                        .HasFilter("[DeletedTime] IS NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Readiculous.Data.Models.Book", b =>
                {
                    b.HasOne("Readiculous.Data.Models.Genre", "BookGenre")
                        .WithMany()
                        .HasForeignKey("BookGenreGenreId");

                    b.HasOne("Readiculous.Data.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Readiculous.Data.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Readiculous.Data.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("BookGenre");

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Readiculous.Data.Models.BookGenreAssignment", b =>
                {
                    b.HasOne("Readiculous.Data.Models.Book", "Book")
                        .WithMany("GenreAssociations")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Readiculous.Data.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Readiculous.Data.Models.FavoriteBook", b =>
                {
                    b.HasOne("Readiculous.Data.Models.Book", "Book")
                        .WithMany("FavoritedbyUsers")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Readiculous.Data.Models.User", "User")
                        .WithMany("UserFavoriteBooks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Readiculous.Data.Models.Genre", b =>
                {
                    b.HasOne("Readiculous.Data.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Readiculous.Data.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Readiculous.Data.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Readiculous.Data.Models.Review", b =>
                {
                    b.HasOne("Readiculous.Data.Models.Book", "Book")
                        .WithMany("BookReviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Readiculous.Data.Models.User", "User")
                        .WithMany("UserReviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Readiculous.Data.Models.User", b =>
                {
                    b.HasOne("Readiculous.Data.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Readiculous.Data.Models.User", "DeletedByUser")
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Readiculous.Data.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("DeletedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("Readiculous.Data.Models.Book", b =>
                {
                    b.Navigation("BookReviews");

                    b.Navigation("FavoritedbyUsers");

                    b.Navigation("GenreAssociations");
                });

            modelBuilder.Entity("Readiculous.Data.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Readiculous.Data.Models.User", b =>
                {
                    b.Navigation("UserFavoriteBooks");

                    b.Navigation("UserReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
